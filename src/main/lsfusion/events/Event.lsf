MODULE Event;

REQUIRE Employee;

NAMESPACE Event;

CLASS Event 'Event';
TABLE event (Event);

id 'Code' = DATA STRING [15] (Event) INDEXED CHARWIDTH 5 IN id;
event (id) = GROUP AGGR Event c BY id (c);

name 'Name' = DATA ISTRING [100] (Event) CHARWIDTH 15;
date 'Date entered' = DATA DATE (Event);
time 'Input time' = DATA TIME (Event);
dateNext 'Date of next' = DATA DATE (Event);
description 'Content' = DATA TEXT (Event);
descriptionString 'Content' (Event e) = ISTRING [1000] (description (e)) CHARWIDTH 30;
addition 'Addition' = DATA TEXT (Event);
additionString 'Addition' (Event e) = ISTRING [1000] (addition (e)) CHARWIDTH 30;

customer = DATA Customer (Event);
idCustomer 'Customer code' (Event e) = id (customer (e));
nameCustomer 'Customer' (Event e) = name (customer (e)) IN id;

merge (Customer from, Customer to) + {customer (Event e) <- to WHERE customer (e) = from; }

legalEntity = DATA LegalEntity (Event);
idLegalEntity 'Organization code' (Event e) = id (legalEntity (e));
nameLegalEntity 'Organization' (Event e) = name (legalEntity (e)) IN id;

WHEN LOCAL SETCHANGED (customer (legalEntity (Event e))) DO
    customer (e) <- customer (legalEntity (e));
CONSTRAINT customer (Event e) AND legalEntity (e) AND NOT customer (e) = customer (legalEntity (e)) CHECKED BY legalEntity [Event] MESSAGE 'The customer is not the same as the organization';

employee = DATA Employee (Event);
idEmployee 'Employee ID' (Event e) = id (employee (e));
nameEmployee 'Employee' (Event e) = name (employee (e));

contact = DATA Contact.Contact (Event);
idContact 'Contact person code' (Event e) = id (contact (e));
nameContact 'Contact person' (Event e) = name (contact (e)) IN id;
phoneContact 'Contact phone number' (Event e) = OVERRIDE phone (contact (e)), (GROUP LAST number (Phone p) ORDER DESC p IF contact (p) == contact (e)) CHARWIDTH 15;
namePositionContact 'Position of the contact person' (Event e) = name (position (contact (e)));

CONSTRAINT customer (Event e) AND contact (e) AND NOT customer (contact (e)) == customer (e) CHECKED BY contact [Event] MESSAGE 'The customer of the contact is not the same as the customer';
CONSTRAINT legalEntity (Event e) AND contact (e) AND NOT legalEntity (contact (e)) == legalEntity (e) CHECKED BY contact [Event] MESSAGE 'The organization of the contact is not the same as the organization';

CLASS EventType 'Event type';
TABLE eventType (EventType);

name 'Name' = DATA ISTRING [100] (EventType) CHARWIDTH 15;

FORM eventType 'Event type'
    OBJECTS o = EventType PANEL
    PROPERTIES (o) name
    
    EDIT EventType OBJECT o
;

FORM eventTypes 'Event Type'
    OBJECTS o = EventType
    PROPERTIES (o) READONLY name
    PROPERTIES (o) NEWSESSION NEW, EDIT, DELETE
    ORDERS name (o)
    
    LIST EventType OBJECT o
;

type = DATA EventType (Event);
nameType 'Event type' (Event e) = name (type (e));

FORM event 'Event'
    OBJECTS o = Event PANEL
    PROPERTIES (o) id, name, nameType, nameCustomer, nameLegalEntity, nameEmployee, nameContact, date, time, dateNext, description, addition
    
    EDIT Event OBJECT o
;

DESIGN event {
    OBJECTS {
        NEW data FIRST {
            caption = 'Main parameters';
            type = CONTAINERH;
            MOVE PROPERTY (id (o));
            MOVE PROPERTY (date (o));
            MOVE PROPERTY (time (o));
            MOVE PROPERTY (dateNext (o));
            MOVE PROPERTY (name (o)) {charWidth = 30; }
            MOVE PROPERTY (nameType (o));
        }
        NEW contact {
            caption = 'Contacts';
            alignment = STRETCH;
            MOVE PROPERTY (nameCustomer (o));
            MOVE PROPERTY (nameLegalEntity (o));
            MOVE PROPERTY (nameContact (o));
        }
        NEW docs {
            caption = 'Documents';
            type = CONTAINERH;
        }
        NEW employee {
            caption = 'Employee';
            alignment = STRETCH;
            MOVE PROPERTY (nameEmployee (o));
        }
        NEW bottom {
            type = CONTAINERH;
            fill = 1;
            NEW description {
                fill = 1;
                caption = 'Content';
                MOVE PROPERTY (description (o)) {caption = ''; fill = 1; }
            }
            NEW addition {
                fill = 1;
                caption = 'Caption';
                MOVE PROPERTY (addition (o)) {caption = ''; fill = 1; }
            }
        }
    }
}

DESIGN event {
    GROUP (, o) {
        type = CONTAINERV;
        fill = 1;
        PROPERTY (description (o)) {valueHeight = 100; }
        PROPERTY (addition (o)) {valueHeight = 100; }
    }
}

employee (e) <- currentUser () WHEN SET (e IS Event);
date (e) <- currentDate () WHEN SET (e IS Event);
time (e) <- currentTime () WHEN SET (e IS Event);

// WHEN LOCAL FORMS event SETCHANGED (customer (Event e)) AND NOT CHANGED (legalEntity (e)) AND [GROUP SUM 1 BY customer (LegalEntity l)] (customer (e)) == 1 DO {
// legalEntity (e) <- GROUP MAX LegalEntity l IF customer (l) == customer (e);
//}

FORM events 'Events'
    OBJECTS o = Event LAST
    PROPERTIES (o) READONLY id, name, nameType, nameCustomer, nameLegalEntity, nameEmployee, nameContact, date, time, dateNext, descriptionString, additionString
    PROPERTIES (o) NEWSESSION NEW, EDIT, DELETE
    ORDERS date (o), time (o)
;

FORM dialogEvents 'Events'
    OBJECTS o = Event LAST
    PROPERTIES (o) READONLY id, name, nameType, nameCustomer, nameLegalEntity, nameEmployee, nameContact, date, time, dateNext, descriptionString, additionString
    ORDERS date (o), time (o)
    
    LIST Event OBJECT o
;

NAVIGATOR {
    NEW events BEFORE masterData;
}
