MODULE TimeEntry;

REQUIRE Issue;

NAMESPACE Project;

CLASS Activity 'Activity';
TABLE activity (Activity);

name 'Name' = DATA ISTRING [100] (Activity) CHARWIDTH 15 IN id;
activity = GROUP AGGR Activity p BY name (p);

FORM activity 'Activity'
    OBJECTS o = Activity PANEL
    PROPERTIES (o) name
    
    EDIT Activity OBJECT o
;

FORM activities 'Activities'
    OBJECTS o = Activity
    PROPERTIES (o) READONLY name
    PROPERTIES (o) NEWSESSION NEW, EDIT, DELETE
;

FORM dialogActivities 'Activities'
    OBJECTS o = Activity
    PROPERTIES (o) READONLY name
    
    LIST Activity OBJECT o
;

CLASS TimeEntry 'Time stamp';
TABLE timeEntry (TimeEntry);

id 'Code' = DATA STRING [15] (TimeEntry) INDEXED CHARWIDTH 5 IN id;

hours 'Hours' = DATA NUMERIC [7,2] (TimeEntry);
comments 'Comment' = DATA TEXT (TimeEntry);
commentsString 'Comment' (TimeEntry t) = ISTRING [1000] (comments (t)) CHARWIDTH 50;
date 'Date' = DATA DATE (TimeEntry);
month (TimeEntry t) = extractMonth (date (t));
year 'Year' (TimeEntry t) = extractYear (date (t));

activity = DATA Activity (TimeEntry);
nameActivity 'Activity' (TimeEntry t) = name (activity (t));

project = DATA Project (TimeEntry);
nameProject 'Project' (TimeEntry t) = name (project (t));

customer = DATA Customer (TimeEntry);
nameCustomer 'Customer' (TimeEntry e) = name (customer (e));

employee = DATA Employee (TimeEntry);
nameEmployee 'Employee' (TimeEntry t) = name (employee (t));

issue = DATA Issue (TimeEntry);
nameIssue 'Issue' (TimeEntry t) = name (issue (t));
numberIssue 'Issue number' (TimeEntry t) = number (issue (t));

merge (Customer from, Customer to) + {customer (TimeEntry e) <- to WHERE customer (e) = from; }

WHEN LOCAL SETCHANGED (customer (project (TimeEntry t))) DO {
    customer (t) <- customer (project (t));
}

WHEN LOCAL SETCHANGED (issue (TimeEntry t)) DO {
    project (t) <- project (issue (t));
    customer (t) <- customer (issue (t));
}

CONSTRAINT project (TimeEntry t) AND customer (t) AND NOT customer (project (t)) == customer (t) CHECKED BY customer [TimeEntry] MESSAGE 'The checkout client is not a project client';
CONSTRAINT issue (TimeEntry t) AND customer (t) AND NOT customer (issue (t)) == customer (t) CHECKED BY customer [TimeEntry] MESSAGE 'The checkout client is not a problem client';
CONSTRAINT issue (TimeEntry t) AND project (t) AND NOT project (issue (t)) == project (t) CHECKED BY project [TimeEntry] MESSAGE 'The checkout project is not a problem project';
CONSTRAINT TimeEntry t IS TimeEntry AND NOT project (t) AND NOT customer (t) MESSAGE 'A project or customer must be specified for time stamping';

disableEditing = ABSTRACT BOOLEAN (TimeEntry);

hours 'Effort' (Issue i) = GROUP SUM hours (TimeEntry t) BY issue (t);
hours 'Effort' (Employee e, DATE d) = GROUP SUM hours (TimeEntry t) BY employee (t), date (t) CHARWIDTH 2;
hours 'Effort' (Employee e, INTEGER y, Month m) = GROUP SUM hours (TimeEntry t) BY employee (t), year (t), month (t);
hours 'Effort' (Employee e, INTEGER y) = GROUP SUM hours (TimeEntry t) BY employee (t), year (t);
hours 'Effort' (Employee e, DATE df, DATE dt) = GROUP SUM hours (TimeEntry t) IF date (t)> = df AND date (t) <= dt BY employee (t);
hours 'Effort' (Employee e, Customer c, DATE df, DATE dt) = GROUP SUM hours (TimeEntry t) IF date (t)> = df AND date (t) <= dt BY employee (t), customer (t );
hours 'Effort' (Project p, Customer c, DATE df, DATE dt) = GROUP SUM hours (TimeEntry t) IF date (t)> = df AND date (t) <= dt BY project (t), customer (t );
hours 'Effort' (Project p, Employee e, Customer c, DATE df, DATE dt) = GROUP SUM hours (TimeEntry t) IF date (t)> = df AND date (t) <= dt BY project (t), employee (t), customer (t);
hours 'Effort' (Project p, Employee e, DATE df, DATE dt) = GROUP SUM hours (TimeEntry t) IF date (t)> = df AND date (t) <= dt BY project (t), employee (t );
hours 'Effort' (Employee e, Project p, INTEGER y, Month m) = GROUP SUM hours (TimeEntry t) BY employee (t), project (t), year (t), month (t);
hours 'Effort' (Employee e, Project p, INTEGER y) = GROUP SUM hours (TimeEntry t) BY employee (t), project (t), year (t);

employee (TimeEntry e) <- currentUser () WHEN SET (e IS TimeEntry);
date (TimeEntry e) <- currentDate () WHEN SET (e IS TimeEntry);

forbidTimeEntries 'Forbid Time Stamps' = DATA BOOLEAN (Customer);
EXTEND FORM customer PROPERTIES forbidTimeEntries (o);

CONSTRAINT forbidTimeEntries (customer (TimeEntry t)) CHECKED BY customer [TimeEntry] MESSAGE 'It is forbidden to add time stamps for this customer';

FORM timeEntry 'Time stamp'
    OBJECTS o = TimeEntry PANEL
    PROPERTIES (o) id, hours, date, nameActivity, nameProject, nameCustomer, nameEmployee, numberIssue, comments
    
    EDIT TimeEntry OBJECT o
;
DESIGN timeEntry {
    OBJECTS {
        NEW data FIRST {
            caption = 'Main parameters';
            type = CONTAINERH;
            MOVE PROPERTY (id (o));
            MOVE PROPERTY (date (o));
            MOVE PROPERTY (hours (o));
            MOVE PROPERTY (nameActivity (o));
        }
        NEW contact {
            caption = 'Challenge';
            NEW issue {
                type = CONTAINERH;
                MOVE PROPERTY (numberIssue (o));
                MOVE PROPERTY (nameProject (o));
            }
            MOVE PROPERTY (nameCustomer (o));
        }
        NEW employee {
            caption = 'Employee';
            alignment = STRETCH;
            MOVE PROPERTY (nameEmployee (o));
        }
        NEW bottom {
            type = CONTAINERH;
            fill = 1;
            NEW description {
                fill = 1;
                caption = 'Comment';
                MOVE PROPERTY (comments (o)) {caption = ''; fill = 1; }
            }
        }
    }
}

FORM timeEntries 'Timestamps'
    OBJECTS o = TimeEntry LAST
    PROPERTIES (o) READONLYIF isReadonly () id, hours, commentsString, date, nameActivity, nameProject, nameCustomer, nameEmployee, numberIssue, nameIssue
    PROPERTIES (o) NEWSESSION NEW, EDIT, DELETE
    ORDERS date (o), id (o)
;

@extendFormEditable (timeEntries);

FORM dialogTimeEntries 'Timestamps'
    OBJECTS o = TimeEntry LAST
    PROPERTIES (o) READONLY id, hours, commentsString, date, nameActivity, nameProject, nameCustomer, nameEmployee, numberIssue, nameIssue
    ORDERS date (o), id (o)
    
    LIST TimeEntry OBJECT o
;

NAVIGATOR {
    project {
        NEW activities;
        NEW timeEntries;
    }
}
