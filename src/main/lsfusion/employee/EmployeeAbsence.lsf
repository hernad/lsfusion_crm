MODULE EmployeeAbsence;

REQUIRE Employee, WorkingHours;

NAMESPACE Employee;

CLASS Absence 'Absence';
TABLE absence (Absence);

id 'Code' = DATA STRING [15] (Absence) INDEXED CHARWIDTH 5 IN id;
absence (id) = GROUP AGGR Absence c BY id (c);

employee = DATA Employee (Absence);
idEmployee 'Employee ID' (Absence a) = id (employee (a));
nameEmployee 'Employee' (Absence a) = name (employee (a));

CLASS AbsenceReason 'Absence reason';
TABLE absenceReason (AbsenceReason);

name 'Name' = DATA ISTRING [100] (AbsenceReason) CHARWIDTH 15;
inactive 'Inactive' = DATA BOOLEAN (AbsenceReason);

FORM absenceReason 'Absence reason'
    OBJECTS o = AbsenceReason PANEL
    PROPERTIES (o) name, inactive
    
    EDIT AbsenceReason OBJECT o
;

FORM absenceReasons 'Reasons for absence'
    OBJECTS o = AbsenceReason
    PROPERTIES (o) READONLY name, inactive
    FILTERGROUP active FILTER 'Active' NOT inactive (o) DEFAULT
    PROPERTIES (o) NEWSESSION NEW, EDIT, DELETE
;

FORM dialogAbsenceReasons 'Reasons for absence'
    OBJECTS o = AbsenceReason
    PROPERTIES (o) READONLY name, inactive
    FILTERGROUP active FILTER 'Active' NOT inactive (o) DEFAULT
    
    LIST AbsenceReason OBJECT o
;

reason = DATA AbsenceReason (Absence) NONULL;
nameReason 'Absence reason' (Absence a) = name (reason (a));

dateFrom 'Date from' = DATA DATE (Absence);
dateTo 'Date by' = DATA DATE (Absence);
hours 'Number of hours' = DATA NUMERIC [7,2] (Absence);
date 'Date entered' = DATA DATE (Absence);
note 'Note' = DATA ISTRING [100] (Absence) CHARWIDTH 30;

CONSTRAINT dateTo (Absence a) <dateFrom (a) MESSAGE 'Date to must not be earlier than date from';

@addRoleApplicationSetting (editDays, 'Days to edit absence', INTEGER);

isEditable (Absence a) = NOT dateFrom (a) <sum (currentDate (), -editDays (mainRole (currentUser ()))) AND NOT dateTo (a) <sum (currentDate (), -editDays (mainRole (currentUser () )));

CONSTRAINT (CHANGED (dateFrom (Absence a)) OR CHANGED (dateTo (a))) AND NOT isEditable (a) MESSAGE 'The absence date does not fall within the editing period';

workingHours 'Working hours per interval' (Absence a) = GROUP SUM workingHours (DATE d) IF iterate (d, dateFrom (a), dateTo (a));

hours 'Hours' (Absence a, DATE d) = PARTITION UNGROUP hours
                                                             LIMIT STRICT workingHours (d) IF d> = dateFrom (a) AND d <= dateTo (a)
                                                             ORDER d
                                                             BY a;
                                                             
absenceHours 'Hours' (Employee e, DATE d) = GROUP SUM hours (Absence a, d) BY employee (a) CHARWIDTH 2;

employee (Absence a) <- currentUser () WHEN SET (a IS Absence);
date (Absence a) <- currentDate () WHEN SET (a IS Absence);
dateFrom (Absence a) <- currentDate () WHEN SET (a IS Absence);
dateTo (Absence a) <- currentDate () WHEN SET (a IS Absence);
hours (Absence a) <- workingHours (currentDate (), currentUser ()) WHEN SET (a IS Absence);

FORM absence 'Absence of employees'
    OBJECTS o = Absence PANEL
    PROPERTIES (o) id, nameEmployee, nameReason, dateFrom, dateTo, hours, date, note

    EDIT Absence OBJECT o
;

DESIGN absence {
    OBJECTS {
        NEW data FIRST {
            NEW firstData {
                caption = 'Main parameters';
                type = CONTAINERH;
                MOVE PROPERTY (id (o));
                MOVE PROPERTY (date (o));
            }
            NEW secondData {
                type = CONTAINERH;
                caption = 'Time away';
                MOVE PROPERTY (dateFrom (o));
                MOVE PROPERTY (dateTo (o));
                MOVE PROPERTY (hours (o));
            }
        }
        NEW employee {
            caption = 'Employee';
            alignment = STRETCH;
            MOVE PROPERTY (nameEmployee (o));
        }
        NEW contact {
            caption = 'Description';
            alignment = STRETCH;
            MOVE PROPERTY (nameReason (o));
            MOVE PROPERTY (note (o));
        }
    }
}

WHEN LOCAL FORMS absence CHANGED (dateFrom (Absence a)) OR CHANGED (dateTo (a)) DO {
    hours (a) <- GROUP SUM workingHours (DATE d, currentUser ()) IF d> = dateFrom (a) AND d <= dateTo (a);
}

FORM absences 'Absence of employees'
    OBJECTS o = Absence LAST
    PROPERTIES (o) READONLY id, nameEmployee, nameReason, dateFrom, dateTo, hours, workingHours, date, note
    PROPERTIES (o) NEWSESSION NEW, EDIT SHOWIF isEditable (o), DELETE SHOWIF isEditable (o)
    ORDERS date (o)

    OBJECTS d = DATE
    PROPERTIES READONLY VALUE (d), extractDOWName (d), hours (o, d)
    FILTERS hours (o, d)
;

DESIGN absences {
    OBJECTS {
        type = SPLITH;
        BOX (o) {fill = 4; }
        BOX (d) {fill = 1; }
    }
}

FORM dialogAbsences 'Absence of employees'
    OBJECTS o = Absence LAST
    PROPERTIES (o) READONLY id, nameEmployee, nameReason, dateFrom, dateTo, hours, workingHours, date, note
    ORDERS date (o)
    
    LIST Absence OBJECT o
;

NAVIGATOR {
    employeeFolder {
        NEW absences;
        NEW absenceReasons;
    }
}
