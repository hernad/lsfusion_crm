MODULE NBRB;

REQUIRE System,
        Currency, Utils,
        SchedulerDefaultData;


// ---------------------------------------------- Import rates NBRB ------------------------------------------------- ---- //

GROUP nbrb 'NBRB Courses': public;

importNBRBExchangeRateDateFrom 'Date from' = DATA DATE () IN nbrb;
importNBRBExchangeRateDateTo 'Date by' = DATA DATE () IN nbrb;

importNBRBExchangeRateDaysCount 'Number of days' = DATA INTEGER () IN nbrb;

cur_Abbreviation = DATA LOCAL STRING [255] (INTEGER);
cur_ID = DATA LOCAL INTEGER (INTEGER);
cur_Scale = DATA LOCAL INTEGER (INTEGER);
cur_OfficialRate = DATA LOCAL NUMERIC [20,13] (INTEGER);
dateTime = DATA LOCAL STRING [255] (INTEGER);

importNBRBExchangeRate 'Import NBRB rates for the period' (DATE dateFrom, DATE dateTo) {
    LOCAL result = FILE ();
    EXTERNAL HTTP GET 'http://www.nbrb.by/API/ExRates/Currencies' PARAMS System.exportFile () TO result;
    IMPORT JSON FROM result () TO cur_Abbreviation = Cur_Abbreviation, cur_ID = Cur_ID, cur_Scale = Cur_Scale;
    FOR Currency c IS Currency DO {
        FOR NOT typeExchange ('NBRB (' + shortName (c) + ')') NEW te = TypeExchange DO {
            name (te) <- 'NBRB (' + shortName (c) + ')';
            currency (te) <- c;
        }
        FOR cur_Abbreviation (INTEGER i) = shortName (c) DO {
            LOCAL result2 = FILE ();
            LOCAL aaa = STRING [255] ();
            EXTERNAL HTTP GET 'http://www.nbrb.by/API/ExRates/Rates/Dynamics/' + cur_ID (i)
                                                  + '? startDate =' + [FORMULA STRING [20] 'to_char (($ 1), \' MM / DD / YYYY \ ')'] (dateFrom)
                                                  + '& endDate =' + [FORMULA STRING [20] 'to_char (($ 1), \' MM / DD / YYYY \ ')'] (dateTo) TO result2;
            cur_OfficialRate (INTEGER j) <- NULL;
            IMPORT JSON FROM result2 () TO cur_OfficialRate = Cur_OfficialRate, dateTime = Date;
            FOR cur_OfficialRate (INTEGER j) AND DATE date1 = DATE (getWord (dateTime (j), 'T', 1)) DO {
                rate (TypeExchange te, c, date1) <- NUMERIC [20,13] (cur_OfficialRate (j) / cur_Scale (i)) WHERE shortName (currency (te)) = 'BYN';
                rate (TypeExchange te, Currency c1, date1) <- NUMERIC [20,13] (1 / (cur_OfficialRate (j) / cur_Scale (i))) WHERE shortName (c1) = 'BYN' AND currency (te) = c;
            }
        }
    }
    apply ();
} IN nbrb;

importNBRBExchangeRateDateFromDateTo 'Import NBRB rates' () {
    IF sum (importNBRBExchangeRateDateFrom (), 365) <= importNBRBExchangeRateDateTo () THEN
        ASK 'The period is more than 365 days, only the first 365 days will be accepted' DO {importNBRBExchangeRate (importNBRBExchangeRateDateFrom (), importNBRBExchangeRateDateTo ());} ELSE {RETURN;}
        ELSE importNBRBExchangeRate (importNBRBExchangeRateDateFrom (), importNBRBExchangeRateDateTo ());
} IN nbrb;

importNBRBExchangeRateLastDays 'Import latest NBRB rates' () {
    IF importNBRBExchangeRateDaysCount ()> 365 THEN
        ASK 'The number of days is more than 365 days, only the first 365 days will be accepted' DO {importNBRBExchangeRate (subtract (currentDate (), importNBRBExchangeRateDaysCount ()), currentDate ());} ELSE {RETURN;}
        ELSE importNBRBExchangeRate (subtract (currentDate (), importNBRBExchangeRateDaysCount ()), currentDate ());
} IN nbrb;

EXTEND FORM typeExchangeCurrencyDate
    PROPERTIES () importNBRBExchangeRateDateFrom, importNBRBExchangeRateDateTo, importNBRBExchangeRateDateFromDateTo
    PROPERTIES () importNBRBExchangeRateDaysCount, importNBRBExchangeRateLastDays
;

DESIGN typeExchangeCurrencyDate {
    importExchangeRates {
        MOVE GROUP (nbrb) {type = CONTAINERH;}
        NEW lastDaysContainer {
            type = CONTAINERH;
            MOVE PROPERTY (importNBRBExchangeRateDaysCount ());
            MOVE PROPERTY (importNBRBExchangeRateLastDays ());
        }
        
    }
}

loadDefaultScheduledTasks () + {
    loadDefaultScheduledTask ('Loading NBRB courses', 2014_07_01_15: 00, 43200, SchedulerStartType.afterFinish);
    loadDefaultScheduledTaskDetail ('Loading NBRB rates', 1, 'NBRB.importNBRBExchangeRateLastDays []');
}

fillCrossFromTo 'Recalculate inverse and cross rate for the period' (DATE dateFrom, DATE dateTo) {
    LOCAL dateCur = DATE ();
    
    dateCur () <- dateFrom;
    WHILE dateCur () <= dateTo DO {
        FOR parent (TypeExchange t) DO {
            IF isRevers (t) THEN {
                rate (t, Currency c, DATE date) <- NUMERIC [15.8] (1 / (rate (parent (t), currency (t), dateCur ()) IF rate (parent (t), currency (t) , dateCur ())! = 0))
                    WHERE date == dateCur () AND c == currency (parent (t));
            } ELSE {
                rate (t, Currency c, DATE date) <- NUMERIC [15.8] (rateOn (parent (t), c, dateCur ()) / (rateOn (parent (t), currency (t), dateCur ()) IF rateOn (parent (t), currency (t), dateCur ())! = 0)) WHERE date == dateCur () AND c IS Currency;
            
            }
        }
        dateCur () <- sum (dateCur (), 1);
    }
}

fillCrossPeriod 'Recalculate reverse and cross rate for the period' () {
    IF importNBRBExchangeRateDateFrom () AND importNBRBExchangeRateDateTo () THEN {
        fillCrossFromTo (importNBRBExchangeRateDateFrom (), importNBRBExchangeRateDateTo ());
        apply ();
    } ELSE {
        MESSAGE 'No period specified';
    }
} IN nbrb;

fillCrossLastDays 'Recalculate inverse and cross rate last' () {
    IF importNBRBExchangeRateDaysCount () THEN {
        fillCrossFromTo (subtract (currentDate (), importNBRBExchangeRateDaysCount ()), currentDate ());
        apply ();
    } ELSE {
        MESSAGE 'The number of days to recalculate is not specified';
    }
}

EXTEND FORM typeExchangeCurrencyDate
    PROPERTIES () fillCrossPeriod, fillCrossLastDays
;
DESIGN typeExchangeCurrencyDate {
    lastDaysContainer {
        MOVE PROPERTY (fillCrossLastDays ());
    }
}
