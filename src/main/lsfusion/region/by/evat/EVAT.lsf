MODULE EVAT;

REQUIRE Doc, Numerator, LegalEntityBy;

NAMESPACE EVAT;

CLASS EVAT 'Electronic invoice';
TABLE EVAT (EVAT);

EVATDocument 'Document' = DATA Document (EVAT) INDEXED;

CONSTRAINT EVAT e IS EVAT AND NOT EVATDocument (e)
    MESSAGE 'The ESCF must have a link to the document!';

@defineNumbered (EVAT);
@defineNumeratedDefault (EVAT, 'ESCHF', 'ES');

in 'On' = DATA LOCAL BOOLEAN (EVAT);
exported 'Uploaded' = DATA BOOLEAN (EVAT);
noexported 'Not exported' (EVAT e) = NOT exported (e);

canceled 'Canceled' = DATA BOOLEAN (EVAT);
nocancelled 'Not canceled' (EVAT e) = NOT canceled (e);

// CONSTRAINT DROPPED (EVAT e IS EVAT) AND PREV (exported (e)) MESSAGE 'It is forbidden to delete Uploaded Invoices';
// CONSTRAINT SET (canceled (EVAT e)) AND exported (e) MESSAGE 'It is forbidden to cancel Uploaded Invoices';

unpSender 'Business entity constituting the ESCF' = DATA STRING [100] (EVAT);
exportYear 'Year to export' = DATA INTEGER (EVAT);
date 'Date of the operation' = DATA DATE (EVAT);

padNumber = ABSTRACT VALUE STRING [20] (EVAT);
padNumber (EVAT e) + = STRING [20] (lpad (number (e), 10, '0'));

exportNumber 'Export number' (EVAT e) = unpSender (e) + '-' + (OVERRIDE exportYear (e), Time.extractYear (currentDate ()) IF e IS EVAT) + '-' + padNumber (e);
exportDNumber 'Export number' (EVAT e) = unpSender (e) + '-' + exportYear (e) + '-' + padNumber (e);
EVATExportNumber 'ESCF by number for export' = GROUP AGGR EVAT e BY exportDNumber (e);

exportFileXml 'File name to export' (EVAT e) = exportNumber (e) + '.xml';

// WHEN SET (exported (EVAT e)) DO exportYear (e) <- Time.extractYear (currentDate ());
WHEN SET (EVAT e IS EVAT) DO exportYear (e) <- Time.extractYear (currentDate ());

documentType 'Document type name' = DATA STRING [30] (EVAT);

codeDocType 'Document type code' = DATA INTEGER (EVAT);
blankCodeDoc 'Blank type code' = DATA STRING [100] (EVAT);
dataDateDoc 'Date' = DATA DATE (EVAT);
dateDoc 'Date' (EVAT e) = OVERRIDE dataDateDoc (e), date (e);
seriesDoc 'Series' = DATA STRING [100] (EVAT);

numberContract 'Number of the contract for the supply of goods' = DATA STRING [15] (EVAT);
dateContract 'Date of the contract for the supply of goods' = DATA DATE (EVAT);
numberDoc 'Document number' = DATA STRING [15] (EVAT);

//The supplier
supplier 'Supplier' = DATA LegalEntity (EVAT);
nameSupplier 'Supplier' (EVAT e) = OVERRIDE fullName (supplier (e)), name (supplier (e));
branchCodeSupplier 'Supplier branch code' = DATA INTEGER (EVAT);
addressSupplier 'Supplier address' (EVAT e) = OVERRIDE nameLegalAddress (supplier (e)), '';
dependentPersonSupplier 'Dependent Person' = DATA BOOLEAN (EVAT);
residentsOfOffshoreSupplier 'Deal with a resident of the offshore zone' = DATA BOOLEAN (EVAT);
specialDealGoodsSupplier ' deal '= DATA BOOLEAN (EVAT);
bigCompanySupplier 'Large payer (supplier)' = DATA BOOLEAN (EVAT);
countryCodeSupplier 'Supplier country code' = DATA ISTRING [30] (EVAT);
unpSupplier 'supplier's UNP' (EVAT e) = UNP (supplier (e));
legalEntityStatusSupplier 'Supplier Status' = DATA ISTRING [30] (EVAT);

//Recipient
customer 'Recipient' = DATA LegalEntity (EVAT);
nameCustomer 'Recipient' (EVAT e) = OVERRIDE fullName (customer (e)), name (customer (e));
branchCodeCustomer 'Beneficiary's branch code' = DATA INTEGER (EVAT);
addressCustomer 'Beneficiary address' (EVAT e) = OVERRIDE nameLegalAddress (customer (e)), '';
dependentPersonCustomer 'Dependent Person' = DATA BOOLEAN (EVAT);
residentsOfOffshoreCustomer 'Deal with an offshore resident' = DATA BOOLEAN (EVAT);
specialDealGoodsCustomer ' deal '= DATA BOOLEAN (EVAT);
bigCompanyCustomer 'Large payer (recipient)' = DATA BOOLEAN (EVAT);
countryCodeCustomer 'Recipient country code' = DATA ISTRING [30] (EVAT);
unpCustomer 'Beneficiary's UNP' (EVAT e) = UNP (customer (e));
legalEntityStatusCustomer 'Beneficiary Status' = DATA ISTRING [30] (EVAT);

//Product
CLASS EVATDetail 'Line of electronic invoice';
TABLE EVATDetail (EVATDetail);

EVAT = DATA EVAT (EVATDetail) NONULL DELETE INDEXED;
number 'Sequence number' = DATA INTEGER (EVATDetail);
name 'Name' = DATA STRING [255] (EVATDetail);
code 'TNVED code' = DATA STRING [10] (EVATDetail);
codeOced 'Code of activities (OKED)' = DATA STRING [100] (EVATDetail);
quantity 'Quantity' = DATA NUMERIC [16,5] (EVATDetail);
price 'Price' = DATA NUMERIC [16,2] (EVATDetail);
sum 'Sum' = DATA NUMERIC [16,2] (EVATDetail) NONULL;
exciseSum 'Excise Amount' = DATA NUMERIC [16,2] (EVATDetail);
vatRate 'VAT rate' = DATA NUMERIC [16,5] (EVATDetail);
vatRateType 'VAT Type' = DATA ISTRING [20] (EVATDetail);
vatSum 'VAT Amount' = DATA NUMERIC [16,2] (EVATDetail);
sumWithVAT 'Amount with VAT' = DATA NUMERIC [16,2] (EVATDetail);

CLASS DescriptionType 'Description' {
    deductionInFull 'DEDUCTIONINFULL',
    vatExcemption 'VAT_EXEMPTION',
    outsideRB 'OUTSIDERB',
    importVAT 'IMPORTVAT'
}

FORM descriptionTypes
    OBJECTS d = DescriptionType
    PROPERTIES (d) READONLY staticCaption
    LIST DescriptionType OBJECT d
;

descriptionType = DATA DescriptionType (EVATDetail);
nameDescriptionType (EVATDetail d) = staticName (descriptionType (d));
captionDescriptionType 'Description' (EVATDetail d) = staticCaption (descriptionType (d));

totalSum 'Sum (total)' (EVAT e) = GROUP SUM sum (EVATDetail d) BY EVAT (d);
totalExciseSum 'Amount of excise duty (total)' (EVAT e) = GROUP SUM exciseSum (EVATDetail d) BY EVAT (d);
totalVATSum 'VAT amount (total)' (EVAT e) = GROUP SUM vatSum (EVATDetail d) BY EVAT (d);
totalSumWithVAT 'Amount with VAT (total)' (EVAT e) = GROUP SUM sumWithVAT (EVATDetail d) BY EVAT (d);

FORM EVAT 'Electronic Invoice'
    OBJECTS e = EVAT PANEL
    PROPERTIES (e) canceled
    PROPERTIES (e) READONLY unpSender, number, exportYear, exportNumber, exported, documentType,
                  numberContract, dateContract, numberDoc,
                  bigCompanySupplier, dependentPersonSupplier, residentsOfOffshoreSupplier, specialDealGoodsSupplier,
                  bigCompanyCustomer, dependentPersonCustomer, residentsOfOffshoreCustomer, specialDealGoodsCustomer,
                  nameSupplier, unpSupplier, countryCodeSupplier, addressSupplier,
                  nameCustomer, unpCustomer, countryCodeCustomer, addressCustomer,
                  branchCodeSupplier, branchCodeCustomer,
                  codeDocType, blankCodeDoc, dateDoc, seriesDoc,
                  totalSum, totalExciseSum, totalVATSum, totalSumWithVAT
    
    OBJECTS d = EVATDetail
    PROPERTIES (d) READONLY name, code, quantity, price, sum, exciseSum, vatRate, vatRateType, vatSum, sumWithVAT, captionDescriptionType
    FILTERS EVAT (d) == e
    EDIT EVAT OBJECT e
;

DESIGN EVAT {NEW top {
        type = TABBED;
        fill = 1;
        NEW general {
            caption = 'General';
            fill = 1;
            MOVE PROPERTY (unpSender (e));
            MOVE PROPERTY (number (e));
            MOVE PROPERTY (exportYear (e));
            MOVE PROPERTY (exportNumber (e));
            MOVE PROPERTY (exported (e));
            MOVE PROPERTY (canceled (e));
            MOVE PROPERTY (documentType (e));
        }
        NEW supplier {
            caption = 'Supplier';
            fill = 1;
            MOVE PROPERTY (nameSupplier (e));
            MOVE PROPERTY (unpSupplier (e));
            MOVE PROPERTY (countryCodeSupplier (e));
            MOVE PROPERTY (addressSupplier (e));
            MOVE PROPERTY (bigCompanySupplier (e));
            MOVE PROPERTY (dependentPersonSupplier (e));
            MOVE PROPERTY (residentsOfOffshoreSupplier (e));
            MOVE PROPERTY (specialDealGoodsSupplier (e));
            MOVE PROPERTY (branchCodeSupplier (e));
        }
        NEW customer {
            caption = 'Recipient';
            fill = 1;
            MOVE PROPERTY (nameCustomer (e));
            MOVE PROPERTY (unpCustomer (e));
            MOVE PROPERTY (countryCodeCustomer (e));
            MOVE PROPERTY (addressCustomer (e));
            MOVE PROPERTY (bigCompanyCustomer (e));
            MOVE PROPERTY (dependentPersonCustomer (e));
            MOVE PROPERTY (residentsOfOffshoreCustomer (e));
            MOVE PROPERTY (specialDealGoodsCustomer (e));
            MOVE PROPERTY (branchCodeCustomer (e));
        }
        NEW deliveryCondition {
            caption = 'Terms of delivery';
            fill = 1;
            MOVE PROPERTY (codeDocType (e));
            MOVE PROPERTY (blankCodeDoc (e));
            MOVE PROPERTY (dateDoc (e));
            MOVE PROPERTY (seriesDoc (e));
            MOVE PROPERTY (numberContract (e));
            MOVE PROPERTY (dateContract (e));
            MOVE PROPERTY (numberDoc (e));
        }
        NEW roster {
            caption = 'Product data';
            fill = 1;
            MOVE PROPERTY (totalSum (e));
            MOVE PROPERTY (totalExciseSum (e));
            MOVE PROPERTY (totalVATSum (e));
            MOVE PROPERTY (totalSumWithVAT (e));
            MOVE BOX (d);
        }
    }
    MOVE TOOLBARBOX;
}

FORM EVATs 'Electronic Invoices'
    
    OBJECTS dates = (dFrom = DATE, dTo = DATE) PANEL
    PROPERTIES dFrom = VALUE (dFrom), dTo = VALUE (dTo)
    
    OBJECTS e = EVAT
    PROPERTIES (e) in
    PROPERTIES (e) READONLYIF isReadonly () exported, canceled, unpSender, number, exportYear, exportNumber, numberDoc, dateDoc, seriesDoc,
                  nameSupplier, nameCustomer, totalSum,
                  totalExciseSum, totalVATSum, totalSumWithVAT
 
    PROPERTIES (e) NEWSESSION NEW, EDIT, DELETE
    PROPERTIES (e) d = DELETE GRID
    FILTERS date (e)> = dFrom, date (e) <= dTo
    
    OBJECTS d = EVATDetail
    PROPERTIES (d) READONLYIF isReadonly () name, code, quantity, price, sum, exciseSum, vatRate, vatSum, sumWithVAT, captionDescriptionType
    FILTERS EVAT (d) == e
    LIST EVAT OBJECT e
    
    FILTERGROUP exported FILTER 'Unloaded' exported (e)
                         FILTER 'Not exported' noexported (e)
    FILTERGROUP canceled FILTER 'Canceled' canceled (e)
                          FILTER 'Not canceled' nocancelled (e) DEFAULT
;

DESIGN EVATs {
    OBJECTS {
        NEW filters BEFORE BOX (e) {
            MOVE BOX (dates) {
                GROUP (, dates) {
                    type = CONTAINERH;
                    PROPERTY (dFrom) {
                        caption = 'Date since';
                    }
                    PROPERTY (dTo) {
                        caption = 'Date by';
                    }
                }
            }
        }
        NEW pane AFTER BOX (e) {
            type = TABBED;
            fill = 0.2;
            MOVE BOX (d);
        }
    }
}

// NAVIGATOR {
// contractFolder {
// NEW EVATs;
//}
//}
NAVIGATOR {
    NEW FOLDER EVATFolder 'ESCF' BEFORE masterData WINDOW toolbar {
       NEW EVATs;
    }
}

///// ESCF export to XML
dateIssuance 'Current date (char)' = DATA LOCAL STRING [10] ();
dateTransaction 'Date of transaction (char)' = DATA LOCAL STRING [10] ();
dateContract 'Date of contract' = DATA LOCAL STRING [10] ();
dateDoc 'Document date' = DATA LOCAL STRING [10] ();

GROUP general;
GROUP provider;
GROUP recipient;
GROUP senderReceiver;
GROUP deliveryCondition;
GROUP contract: deliveryCondition;
GROUP documents: contract;
GROUP document: documents;
GROUP docType: document;
GROUP roster;
GROUP rosterItem: roster;
GROUP vat;
GROUP descriptions;

FORM issuance 
    OBJECTS e = EVAT
    PROPERTIES sender =unpSender(e) ATTR
    FORMEXTID '=http://www.w3schools.com:issuance'    
    
    PROPERTIES   IN general  =exportNumber(e) EXTID 'number'
    PROPERTIES() IN general  dateIssuance, dateTransaction
    PROPERTIES   IN general  =documentType(e) EXTID 'documentType'
    PROPERTIES   IN provider =legalEntityStatusSupplier(e) EXTID 'providerStatus',
                             =IF dependentPersonSupplier(e) THEN 'true' ELSE 'false' EXTID 'dependentPerson',
                             =IF residentsOfOffshoreSupplier(e) THEN 'true' ELSE 'false' EXTID 'residentsOfOffshore',
                             =IF specialDealGoodsSupplier(e) THEN 'true' ELSE 'false' EXTID 'specialDealGoods',
                             =IF bigCompanySupplier(e) THEN 'true' ELSE 'false' EXTID 'bigCompany',
                             =countryCodeSupplier(e) EXTID 'countryCode',
                             =unpSupplier(e) EXTID 'unp',
                             =nameSupplier(e) EXTID 'name',
                             =addressSupplier(e) EXTID 'address'
                            
    PROPERTIES IN recipient =legalEntityStatusCustomer(e) EXTID 'recipientStatus',
                            =IF dependentPersonCustomer(e) THEN 'true' ELSE 'false' EXTID 'dependentPerson',
                            =IF residentsOfOffshoreCustomer(e) THEN 'true' ELSE 'false' EXTID 'residentsOfOffshore',
                            =IF specialDealGoodsCustomer(e) THEN 'true' ELSE 'false' EXTID 'specialDealGoods',
                            =IF bigCompanyCustomer(e) THEN 'true' ELSE 'false' EXTID 'bigCompany',
                            =countryCodeCustomer(e) EXTID 'countryCode',
                            =unpCustomer(e) EXTID 'unp',
                            =nameCustomer(e) EXTID 'name',
                            =addressCustomer(e) EXTID 'address'
    
    PROPERTIES IN senderReceiver ='' EXTID 'consignors', ='' EXTID 'consignees' 
    
    PROPERTIES IN contract =numberContract(e) EXTID 'number',
                           =dateContract() EXTID 'date'
                           
    PROPERTIES IN docType  =codeDocType(e) EXTID 'code'
    PROPERTIES IN document =dateDoc() EXTID 'date', =blankCodeDoc(e) EXTID 'blankCode', =seriesDoc(e) EXTID 'seria', =numberDoc(e) EXTID 'number' 
    
    PROPERTIES IN roster totalCost =IF totalSum(e) THEN totalSum(e) ELSE 0 ATTR,
                         totalVat =IF totalVATSum(e) THEN totalVATSum(e) ELSE 0 ATTR,
                         totalExcise =IF totalExciseSum(e) THEN totalExciseSum(e) ELSE 0 ATTR,
                         totalCostVat =IF totalSumWithVAT(e) THEN totalSumWithVAT(e) ELSE 0 ATTR
                         
    OBJECTS rosterItem = EVATDetail IN roster
    PROPERTIES =number(rosterItem) EXTID 'number', =name(rosterItem) EXTID 'name',
                             =code(rosterItem) EXTID 'code', =codeOced(rosterItem) EXTID 'code_oced', 
                             =IF price(rosterItem) THEN price(rosterItem) ELSE 0 EXTID 'price',
                             =IF sum(rosterItem) THEN sum(rosterItem) ELSE 0 EXTID 'cost',
                             =IF exciseSum(rosterItem) THEN exciseSum(rosterItem) ELSE 0 EXTID 'summaExcise'

    
    PROPERTIES IN vat =IF vatRate(rosterItem) THEN vatRate(rosterItem) ELSE 0 EXTID 'rate',
                      =vatRateType(rosterItem) EXTID 'rateType',
                      =IF vatSum(rosterItem) THEN vatSum(rosterItem) ELSE 0 EXTID 'summaVat'
    
    PROPERTIES =IF sum(rosterItem) THEN sum(rosterItem) ELSE 0 EXTID 'costVat'
    PROPERTIES IN descriptions =captionDescriptionType(rosterItem) EXTID 'description'
    
    FILTERS EVAT(rosterItem) = e
;

exportToXml 'Export ESCF' () {
    NEWSESSION NESTED LOCAL {
        FOR in (EVAT e) DO {
            dateIssuance () <- STRING [10] ([FORMULA 'to_char (($ 1), ($ 2))'] (currentDate (), 'YYYY-MM-DD'));
            dateTransaction () <- STRING [10] ([FORMULA 'to_char (($ 1), ($ 2))'] (dateDoc (e), 'YYYY-MM-DD'));
            dateContract () <- STRING [10] ([FORMULA 'to_char (($ 1), ($ 2))'] (dateContract (e), 'YYYY-MM-DD'));
            dateDoc () <- STRING [10] ([FORMULA 'to_char (($ 1), ($ 2))'] (dateDoc (e), 'YYYY-MM-DD'));
            
            exported (e) <- TRUE;
            in (e) <- NULL;
            
            documentType (e) <- 'ORIGINAL';
            legalEntityStatusCustomer (e) <- 'CUSTOMER';
            countryCodeCustomer (e) <- '112';
            
            legalEntityStatusSupplier (e) <- 'SELLER';
            countryCodeSupplier (e) <- '112';
            
            codeDocType (e) <- 606;
            
            blankCodeDoc (e) <- '';
            seriesDoc (e) <- '';
            
            EXPORT issuance OBJECTS e = e XML TO System.exportFile;
            zipping (STRING [100] s) <- exportFile () WHERE s = exportFileXml (e);
            
        }
        makeZipFile ();
        open (zipped (), 'evat');

        APPLY;
    }
}
EXTEND FORM EVATs PROPERTIES() TOOLBAR exportToXml;

// Reconciliation of the transferred ESCF with the CSV file
CLASS ListEVAT 'ESCF from CSV file';

number 'Number' = DATA STRING [28] (ListEVAT);
unpSupplier 'UNP of the supplier' = DATA STRING [9] (ListEVAT);
unpCustomer 'UNP of the recipient' = DATA STRING [9] (ListEVAT);
nameCustomer 'Beneficiary's name' = DATA STRING [250] (ListEVAT);
sumWithVAT 'Amount with VAT' = DATA NUMERIC [16,2] (ListEVAT);
datev 'Date of issue' = DATA DATE (ListEVAT);
dates 'Date of occurrence' = DATA DATE (ListEVAT);

EVATExportedNumber = GROUP LAST EVAT e IF nocancelled (e) AND exported (e) BY exportNumber (e), date (e);
EVATExported (ListEVAT li) = EVATExportedNumber (number (li), dates (li));

backgroundColor (ListEVAT li) = CASE
    WHEN EVATExported (li) AND NOT sumWithVAT (li) == totalSumWithVAT (EVATExported (li)) THEN RGB (255, 255, 128)
    WHEN li IS ListEVAT AND NOT EVATExported (li) THEN RGB (255, 70, 64);

listEVATNumber = GROUP LAST ListEVAT li BY number (li), dates (li);
listEVAT (EVAT e) = listEVATNumber (exportNumber (e), date (e));

backgroundColor (EVAT e) = CASE
    WHEN listEVAT (e) AND NOT sumWithVAT (listEVAT (e)) == totalSumWithVAT (e) THEN RGB (255, 255, 128)
    WHEN e IS EVAT AND NOT listEVAT (e) THEN RGB (255, 70, 64);

controlWithCsvFile 'Check against CSV file' () {
    
    LOCAL number = STRING [28] (INTEGER);
    LOCAL unpSupplier = STRING [9] (INTEGER);
    LOCAL unpCustomer = STRING [9] (INTEGER);
    LOCAL nameCustomer = STRING [250] (INTEGER);
    LOCAL sumWithVAT = NUMERIC [16,2] (INTEGER);
    LOCAL datev = DATE (INTEGER);
    LOCAL dates = DATE (INTEGER);
    
    INPUT f = FILE DO {
        IMPORT CSV ';' NOHEADER CHARSET 'cp1251' FROM f AS FILE TO number = O, unpSupplier = B, unpCustomer = I,
                       nameCustomer = K, sumWithVAT = AQ, datev = S, dates = T;
        
        DELETE ListEVAT li WHERE li IS ListEVAT;
        
        FOR trim (number (INTEGER i)) AND i> 1 NEW li = ListEVAT DO {
            number (li) <- number (i);
            unpSupplier (li) <- unpSupplier (i);
            unpCustomer (li) <- unpCustomer (i);
            nameCustomer (li) <- nameCustomer (i);
            sumWithVAT (li) <- sumWithVAT (i);
            datev (li) <- datev (i);
            dates (li) <- dates (i);
        }
    }
}

FORM compareListEVAT 'Comparison with the list of ESCF from CSV file'
    OBJECTS dates = (dFrom = DATE, dTo = DATE) PANEL
    PROPERTIES dFrom = VALUE (dFrom), dTo = VALUE (dTo)
    
    PROPERTIES controlWithCsvFile () DRAW dates
    
    OBJECTS e = EVAT
    PROPERTIES (e) READONLY BACKGROUND backgroundColor (e) date, exportNumber, unpCustomer, nameCustomer, totalSumWithVAT
    ORDERS exportNumber (e)
    FILTERS date (e)> = dFrom, date (e) <= dTo AND nocancelled (e) AND exported (e)
    
    OBJECTS li = ListEVAT
    PROPERTIES (li) READONLY BACKGROUND backgroundColor (li) dates, number, unpCustomer, nameCustomer, sumWithVAT

    ORDERS number (li)
    FILTERS dates (li)> = dFrom, dates (li) <= dTo
;

DESIGN compareListEVAT {
    MOVE BOX (dates);
    NEW EVATBox {
        fill = 1;
        type = SPLITH;
        MOVE BOX (e);
        MOVE BOX (li);
    }
    MOVE TOOLBARBOX;
}
  
NAVIGATOR {
    EVATFolder {
        NEW compareListEVAT;
    }
}
 
